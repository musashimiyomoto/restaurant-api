"""Update typing

Revision ID: d5b5bb11f4ac
Revises: 1c2d1c96c41c
Create Date: 2025-05-13 16:46:51.078258

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d5b5bb11f4ac"
down_revision: Union[str, None] = "1c2d1c96c41c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        "CREATE TYPE orderstatusenum AS ENUM ('PENDING', 'COMPLETED', 'CANCELLED')"
    )
    op.execute("CREATE TYPE userrole AS ENUM ('ADMIN', 'DELIVERY', 'COOK')")

    op.create_unique_constraint(None, "order_dishes", ["id"])

    # Используем SQL выражение для преобразования INTEGER в ENUM
    op.execute(
        """
        ALTER TABLE orders 
        ALTER COLUMN status TYPE orderstatusenum
        USING (
            CASE status
                WHEN 0 THEN 'PENDING'::orderstatusenum
                WHEN 1 THEN 'COMPLETED'::orderstatusenum
                WHEN 2 THEN 'CANCELLED'::orderstatusenum
            END
        )
    """
    )

    op.create_unique_constraint(None, "orders", ["id"])

    # Используем SQL выражение для преобразования VARCHAR в ENUM
    op.execute(
        """
        ALTER TABLE users
        ALTER COLUMN role TYPE userrole
        USING (role::userrole)
    """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "role",
        existing_type=sa.Enum("ADMIN", "DELIVERY", "COOK", name="userrole"),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_constraint(None, "orders", type_="unique")
    op.alter_column(
        "orders",
        "status",
        existing_type=sa.Enum(
            "PENDING", "COMPLETED", "CANCELLED", name="orderstatusenum"
        ),
        type_=sa.INTEGER(),
        existing_nullable=False,
    )
    op.drop_constraint(None, "order_dishes", type_="unique")

    op.execute("DROP TYPE IF EXISTS orderstatusenum")
    op.execute("DROP TYPE IF EXISTS userrole")
    # ### end Alembic commands ###
